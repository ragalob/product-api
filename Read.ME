Notes:

- The project is built in Java EE using Gradle.

- Brand entity is missing an id field for simplicity.

- Product entity has an autogenerated id that is calculated using a counter, in ProductController. Again, with a proper
DB framework, this would be managed in an automated way. There are no restrictions in any field, so two products can be
identical except for their ids.

- Also, relation between Product and Brand (many-to-one) should be managed by the DB framework, together with some
tags in the code, indicating the kind of relation.

- POST method will create a new product. PUT method will try to find a product with the same name and substitute its
 fields. It won't do anything if it doesn't find it. It also won't fail if that's the case.

- As I wasn't sure about what the requirements meant, I have decided to keep data in memory. Hence, data lives there
until the app is restarted. I have created a repository to handle data in this way. This repository needs to implement
an interface to manage all REST operations in the preferred way (in-memory persistence in this case). If-when we plug
this API to a proper DB, we would only need to change the repository implementation. This way we keep app's logic
decoupled from data source.

- I have created Brand and Product objects, which are used in both persistence and business layers. This is like that
cause there is no business logic to be applied to these objects, we represent them as they are. Were we to apply some
sort of logic in the business layer, there should be a persistence object for Product and Brand, and a business
version of both of them, for business logic to be applied.

- I have created unit tests for the method findProductByNameOrBrand, in ProductRepository class, covering several cases.

- I have created an integration test for product creation endpoint, to confirm that it works as expected and returns
the expected message.

Usage:

- create product:
    (POST) http://localhost:8080?name=product1&value=5&duration=10.22&platform=android&country=es&brand=brand1
- update product:
    (PUT) http://localhost:8080?name=product1&value=6&duration=10.33&platform=android&country=nl&brand=brand2
- get all products:
    (GET) http://localhost:8080/product
- get product by id:
    (GET) http://localhost:8080/product/1
- get product by name:
    (GET) http://localhost:8080/product/search/sometext
- delete product:
    (DELETE) http://localhost:8080/product/1
